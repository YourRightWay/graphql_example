import Express from 'express';import morgan from 'morgan';import expressGraphQL from 'express-graphql';import { graphqlExpress } from 'apollo-server-express';import { makeExecutableSchema } from 'graphql-tools';import mongoose from 'mongoose';import Product from './product/model';import { errorHandler } from './middlewares';import serverConfig from './config';import schema from './schema';// webpackimport webpack from 'webpack';import config from '../webpack.config.dev';import webpackDevMiddleware from 'webpack-dev-middleware';import webpackHotMiddleware from 'webpack-hot-middleware';const app = new Express();if (process.env.NODE_ENV === 'development') {  const compiler = webpack(config);  app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: config.output.publicPath }));  app.use(webpackHotMiddleware(compiler));  app.use(morgan('common'));}mongoose.connect(serverConfig.db, (err) => {  if (err) throw err;  console.log('mongo connect');});app.use('/graphql', expressGraphQL({  schema,  graphiql: true,  context: { Product }}));app.use(errorHandler);app.listen(serverConfig.port, (err) => {  if (err) throw err;  console.log(`Delivery soft is running on port: ${serverConfig.port}!`);});export default app;