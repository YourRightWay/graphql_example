import {  GraphQLSchema,  GraphQLObjectType,  GraphQLString,  GraphQLInt,  GraphQLList,  GraphQLNonNull,  GraphQLID} from 'graphql';import data from './data/data.json';const ProductType = new GraphQLObjectType({  name: 'product',  description: 'Product type fields',  fields: {    productId: { type: GraphQLID },    url: { type: GraphQLString },    cover2: { type: GraphQLString },    currency_label: { type: GraphQLString },    retail_price: { type: GraphQLInt },    wholesale_price: { type: GraphQLInt },  }});const rootQuery = new GraphQLObjectType({  name: 'RootQueryType',  description: 'Get product by id and products list',  fields: {    product: {      type: ProductType,      args: {        id: {          type: GraphQLID        }      },      resolve: (parentValue, args) => data.products        .find(p => p.product_id === args.id)    },    products: {      type: new GraphQLList(ProductType),      resolve: () => data.products    }  }});const mutationQuery = new GraphQLObjectType({  name: 'MutationQuery',  description: 'Add products, update and delete product',  fields: {    addProduct: {      type: new GraphQLList(ProductType),      args: {        id: { type: new GraphQLNonNull(GraphQLID) },        url: { type: new GraphQLNonNull(GraphQLString) },        cover2: { type: new GraphQLNonNull(GraphQLString) },        currency_label: { type: new GraphQLNonNull(GraphQLString) },        retail_price: { type: new GraphQLNonNull(GraphQLInt) },        wholesale_price: { type: new GraphQLNonNull(GraphQLInt) },      },      resolve: (parentValue, args, { Product }) => {        Product.create({          productId: args.id        }, (err, car) => {          if (err) return next();          console.log(car);          return [...data.products, {...args, product_id: args.id}];        });      }      // resolve: (parentValue, args) => [...data.products, {...args, product_id: args.id}]    },    updateProduct: {      type: new GraphQLList(ProductType),      args: {        id: { type: GraphQLID },        url: { type: new GraphQLNonNull(GraphQLString) },        cover2: { type: new GraphQLNonNull(GraphQLString) },        currency_label: { type: new GraphQLNonNull(GraphQLString) },        retail_price: { type: new GraphQLNonNull(GraphQLInt) },        wholesale_price: { type: new GraphQLNonNull(GraphQLInt) },      },      resolve: (parentValue, args) => {        const currentIndex = data.products.findIndex(p => p.product_id === args.id);        data.products.splice(currentIndex, 1, {...args, product_id: args.id});        return data.products;      }    },    deleteProduct: {      type: new GraphQLList(ProductType),      args: {        id: { type: GraphQLID },        url: { type: new GraphQLNonNull(GraphQLString) },        cover2: { type: new GraphQLNonNull(GraphQLString) },        currency_label: { type: new GraphQLNonNull(GraphQLString) },        retail_price: { type: new GraphQLNonNull(GraphQLInt) },        wholesale_price: { type: new GraphQLNonNull(GraphQLInt) },      },      resolve: (parentValue, args) => {        const currentIndex = data.products.findIndex(p => p.product_id === args.id);        data.products.splice(currentIndex, 1);        return data.products;      }    }  }});export default new GraphQLSchema({  query: rootQuery,  mutation: mutationQuery});