import {  GraphQLSchema,  GraphQLObjectType,  GraphQLString,  GraphQLInt,  GraphQLList,  GraphQLNonNull} from 'graphql';import data from './data/data.json';const ProductType = new GraphQLObjectType({  name: 'product',  fields: () => ({    product_id: { type: GraphQLInt },    url: { type: GraphQLString },    cover2: { type: GraphQLString },    currency_label: { type: GraphQLString },    retail_price: { type: GraphQLInt },    wholesale_price: { type: GraphQLInt },  })});const rootQuery = new GraphQLObjectType({  name: 'RootQueryType',  fields: {    product: {      type: ProductType,      args: {        id: {          type: GraphQLInt        }      },      resolve: (parentValue, args) => data.products        .find(p => p.product_id === args.id)    },    products: {      type: new GraphQLList(ProductType),      resolve(parentValue, args){        return data.products      }    }  }});const mutationQuery = new GraphQLObjectType({  name: 'MutationQuery',  fields: {    addProduct: {      type: ProductType,      args: {        id: { type: new GraphQLNonNull(GraphQLInt) },        url: { type: new GraphQLNonNull(GraphQLString) },        cover2: { type: new GraphQLNonNull(GraphQLString) },        currency_label: { type: new GraphQLNonNull(GraphQLString) },        retail_price: { type: new GraphQLNonNull(GraphQLInt) },        wholesale_price: { type: new GraphQLNonNull(GraphQLInt) },      },      resolve: (parentValue, args) => {        return [...data.products, {          id: args.url,          url: args.url,          cover2: args.cover2,          currency_label: args.currency_label,          retail_price: args.retail_price,          wholesale_price: args.wholesale_price,        }]      }    },    updateProduct: {      type: ProductType,      args: {        id: { type: GraphQLInt },        url: { type: new GraphQLNonNull(GraphQLString) },        cover2: { type: new GraphQLNonNull(GraphQLString) },        currency_label: { type: new GraphQLNonNull(GraphQLString) },        retail_price: { type: new GraphQLNonNull(GraphQLInt) },        wholesale_price: { type: new GraphQLNonNull(GraphQLInt) },      },      resolve: (parentValue, args) => {        const currentProduct = data.products.find(p => p.product_id === args.id)        return {...currentProduct,          url: args.url,          cover2: args.cover2,          currency_label: args.currency_label,          retail_price: args.retail_price,          wholesale_price: args.wholesale_price,        }      }    },  }})export default new GraphQLSchema({  query: rootQuery,  mutation: mutationQuery});